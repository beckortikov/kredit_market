import streamlit as st
import pandas as pd
import joblib
import gspread
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load('tj_consolidate_pycaret_02.pkl')
import pdfkit
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
from datetime import datetime
def generate_pdf(data, document_number, date):
    rendered = f'''
    <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <title>Client Request</title>
</head>

<body>
    <div class="container">
        <img src="km_logo.png" alt="Company Logo" width="100" height="100" style="position: absolute; top: 10px; left: 10px;">
        <br><br>
        <h4 class="text-center"><strong>–î–æ–∫—É–º–µ–Ω—Ç</strong></h4>
        <br><br>
        <table class="table table-bordered">
            <tbody>
                <tr>
                    <td style="width: 50%;">–ú–µ–Ω–µ–¥–∂–µ—Ä</td>
                    <td style="width: 50%;">{data['Manager'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–§–∏–ª–∏–∞–ª</td>
                    <td style="width: 50%;">{data['district'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–ò–º—è</td>
                    <td style="width: 50%;">{data['name'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–§–∞–º–∏–ª–∏—è</td>
                    <td style="width: 50%;">{data['surname'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä</td>
                    <td style="width: 50%;">{data['phone'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–í–æ–∑—Ä–∞—Å—Ç</td>
                    <td style="width: 50%;">{data['age'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–ü–æ–ª</td>
                    <td style="width: 50%;">{data['gender'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–°—É–º–º–∞</td>
                    <td style="width: 50%;">{data['amount'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–ü–µ—Ä–∏–æ–¥</td>
                    <td style="width: 50%;">{data['duration'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å</td>
                    <td style="width: 50%;">{data['marital_status'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞</td>
                    <td style="width: 50%;">{data['Result'][0]}</td>
                </tr>
                <tr>
                    <td style="width: 50%;">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞</td>
                    <td style="width: 50%;">{data['Probability'][0]}</td>
                </tr>
            </tbody>
        </table>

   <br><br><br><br>
        <tr>
            <td colspan="2" style="text-align: left;">–î–∞—Ç–∞ {datetime.strptime(date,'%Y-%m-%d %H:%M:%S').date()}</td>
        </tr>
        </t>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <tr>
            <td colspan="2" style="text-align: right;">–ü–æ–¥–ø–∏—Å—å: ______________________</td>
    <br><br><br><br>
    <tr>
        <td colspan="2" style="text-align: right;">–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_number}</td>
    </tr>
    </div>
    </body>

    </html>
    '''

    pdfkit.from_string(rendered, 'result.pdf', options={'encoding': 'utf-8'})
    with open("result.pdf", "rb") as pdf_file:
        PDFbyte = pdf_file.read()

    st.download_button(label="–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
                       data=PDFbyte,
                       file_name="test.pdf",
                       mime='application/octet-stream')

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–ø—É—Ç–æ–≤
st.title('–ú–æ–¥–µ–ª—å —Å–∫–æ—Ä–∏–Ω–≥–∞')
manager = st.sidebar.selectbox(r'$\textsf{\normalsize –ú–µ–Ω–µ–¥–∂–µ—Ä}$', ["–ú–∏—Ä–∑–æ–µ–≤ –ß–∞—Ö–æ–Ω–≥–∏—Ä", "–ù—É—Ä–º–∞—Ç–æ–≤ –ö–∞–º–æ–ª—á–æ–Ω", "–ú–∞—Ö–º–∞–¥–∏—è—Ä–æ–≤ –ë–∞—Ö—Ä–æ–º", "–ó–æ–∫–∏—Ä–æ–≤ –£–ª—É–≥–±–µ–∫"])
district_options = {
    "–ú–∏—Ä–∑–æ–µ–≤ –ß–∞—Ö–æ–Ω–≥–∏—Ä": "–î–∂–∞–±–±–æ—Ä –†–∞—Å—É–ª–æ–≤",
    "–ù—É—Ä–º–∞—Ç–æ–≤ –ö–∞–º–æ–ª—á–æ–Ω": "–°–ø–∏—Ç–∞–º–µ–Ω",
    "–ú–∞—Ö–º–∞–¥–∏—è—Ä–æ–≤ –ë–∞—Ö—Ä–æ–º": "–ü–µ–Ω–¥–∂–∏–∫–µ–Ω—Ç",
    "–ó–æ–∫–∏—Ä–æ–≤ –£–ª—É–≥–±–µ–∫": "–•—É–¥–∂–∞–Ω–¥"
}

default_district = "–î—É—à–∞–Ω–±–µ"  # Default district if no match found

district = district_options.get(manager, default_district)

# # Use district variable in your Streamlit app
st.sidebar.write(rf'$\textsf{{\normalsize –§–∏–ª–∏–∞–ª}}$: {district}')
# district = st.sidebar.selectbox(r'$\textsf{\normalsize –§–∏–ª–∏–∞–ª}$', ["–î—É—à–∞–Ω–±–µ", "–•—É–¥–∂–∞–Ω–¥", "–ü–µ–Ω–¥–∂–∏–∫–µ–Ω—Ç", "–î–∂–∞–±–±–æ—Ä –†–∞—Å—É–ª–æ–≤", "–°–ø–∏—Ç–∞–º–µ–Ω"])
name = st.sidebar.text_input(r'$\textsf{\normalsize –ò–º—è}$', '')
surname = st.sidebar.text_input(r'$\textsf{\normalsize –§–∞–º–∏–ª–∏—è}$', '')
phone = st.sidebar.number_input(r'$\textsf{\normalsize –¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä}$', value=None, placeholder="928009292")
age = st.sidebar.number_input(r'$\textsf{\normalsize –í–æ–∑—Ä–∞—Å—Ç}$', value=24, step=1)
gender = st.sidebar.radio(r'$\textsf{\normalsize –ü–æ–ª}$', ['–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞'])
amount = st.sidebar.number_input(r'$\textsf{\normalsize –°—É–º–º–∞}$', value=0, placeholder="–¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞—Ä—Ö–∏")
duration = st.sidebar.selectbox(r'$\textsf{\normalsize –°—Ä–æ–∫}$', [3, 6, 9, 12])
marital_status = st.sidebar.selectbox(r'$\textsf{\normalsize –°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å}$', ['–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º', '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º', '–í–¥–æ–≤–∞/–í–¥–æ–≤–µ—Ü', '–†–∞–∑–≤–µ–¥–µ–Ω'])
credit_history_count = st.sidebar.number_input(r'$\textsf{\normalsize –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤(–∏—Å—Ç–æ—Ä–∏—è)}$', value=0, step=1)

def authenticate_gspread():
    # Load Google Sheets API credentials
    sa = gspread.service_account(filename='credits_mobi.json')
    return sa

# Function to duplicate data to Google Sheets
def duplicate_to_gsheet(new_row):
    # Authenticate with Google Sheets
    gc = authenticate_gspread()

    # Create a new Google Sheets spreadsheet
    sh = gc.open("KreditMarket")

    # Select the first sheet (index 0)
    worksheet = sh.worksheet("Scoring")

    # Check if there's any content in the worksheet
    existing_data = worksheet.get_all_values()

    # Get existing headers if they exist
    headers = existing_data[0] if existing_data else None

    if not headers:
        headers = ['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–§–∏–ª–∏–∞–ª', '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞', '–ü–µ—Ä–∏–æ–¥', '–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤(–∏—Å—Ç–æ—Ä–∏—è)', '–†–µ–∑—É–ª—å—Ç–∞—Ç', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞', '–î–∞—Ç–∞', '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞']
        worksheet.append_row(headers)

    # Convert the new_row DataFrame to a list and append it to the worksheet
    new_row = new_row[['Manager','district', 'phone', 'name', 'surname', 'age', 'gender', 'amount', 'duration', 'marital_status', "credit_history_count",
                        'Result', 'Probability', 'Date', 'DocumentNumber']]
    new_row_list = new_row.values.tolist()
    worksheet.append_rows(new_row_list)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.sidebar.button('–ü–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä–∏–Ω–≥'):
    current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    document_number = f'Doc_{current_date.replace(" ", "_").replace(":", "_")}'
    mapping_dis = {
    "–î—É—à–∞–Ω–±–µ": "dushanbe",
    "–•—É–¥–∂–∞–Ω–¥": "khujand",
    "–ü–µ–Ω–¥–∂–∏–∫–µ–Ω—Ç": "panjakent",
    "–î–∂–∞–±–±–æ—Ä –†–∞—Å—É–ª–æ–≤": "j.rasulov",
    "–°–ø–∏—Ç–∞–º–µ–Ω": "spitamen"
    }
    mapping_mar = {
        '–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º': 'married', '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º':'single', '–í–¥–æ–≤–∞/–í–¥–æ–≤–µ—Ü':'widow/widower', '–†–∞–∑–≤–µ–¥–µ–Ω':'divorced'
    }

    input_data = pd.DataFrame({
        'age': [age],
        'amount': [amount],
        'credit_history_count': [credit_history_count],
        'district': [mapping_dis[district]],
        'duration': [duration],
        'gender': [1 if gender == '–ú—É–∂—á–∏–Ω–∞' else 0],
        'marital_status': [mapping_mar[marital_status]],
    })

    prediction = model.predict_proba(input_data)[:, 0]
    st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç:')
    st.write(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞: {round(prediction[0]*100, 2)}%')
    input_data['Manager'] = manager
    input_data['district'] = district
    input_data['name'] = name
    input_data['surname'] = surname
    input_data['phone'] = phone
    input_data['Result'] = '–û–¥–æ–±—Ä–µ–Ω–æ' if prediction > 1 - 0.05 else '–û—Ç–∫–∞–∑–∞–Ω–æ'
    input_data['gender'] = gender
    input_data['marital_status'] = marital_status
    input_data['Probability'] = f'{round(prediction[0]*100, 2)}%'
    input_data['Date'] = current_date
    input_data['DocumentNumber'] = document_number

    if prediction > 1 - 0.05:
        st.success(r'$\textsf{\Large –ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω! üéâ}$')
        st.balloons()
        duplicate_to_gsheet(input_data)
    else:
        st.error(r'$\textsf{\Large –û—Ç–∫–∞–∑–∞–Ω–æ! üòû}$')
        duplicate_to_gsheet(input_data)

    generate_pdf(input_data, document_number, current_date)